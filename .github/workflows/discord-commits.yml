name: Notify Discord on commits & PRs

on:
  push:
    branches:
      - "**"        # nhận mọi nhánh
  pull_request:
    types: [opened, reopened, ready_for_review, closed, converted_to_draft]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      # (Tuỳ chọn) Không cần checkout repo vì ta đọc payload từ $GITHUB_EVENT_PATH

      - name: Validate Discord webhook
        env:
          RAW_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -z "${RAW_URL:-}" ]; then
            echo "::error::Missing DISCORD_WEBHOOK_URL secret (Repo → Settings → Secrets and variables → Actions)."
            exit 1
          fi
          CLEAN_URL=$(printf '%s' "$RAW_URL" | tr -d '\r' | tr -d '[:space:]')
          if ! echo "$CLEAN_URL" | grep -Eq '^https://(discord\.com|discordapp\.com)/api/webhooks/[0-9]+/[A-Za-z0-9._-]+'; then
            echo "::error::DISCORD_WEBHOOK_URL looks invalid. Re-copy from Discord → Channel → Integrations → Webhooks."
            exit 1
          fi
          echo "DISCORD_WEBHOOK_URL=$CLEAN_URL" >> "$GITHUB_ENV"

      - name: Build commit list
        id: build
        shell: bash
        run: |
          COMMITS=$(jq -r '.commits | length // 0' "$GITHUB_EVENT_PATH")
          EVENT="$GITHUB_EVENT_NAME"
          BRANCH="${GITHUB_REF_NAME:-$(jq -r .ref "$GITHUB_EVENT_PATH" | sed 's#refs/heads/##')}"
          REPO="${GITHUB_REPOSITORY}"

          if [ "$EVENT" = "push" ] && [ "$COMMITS" -gt 0 ]; then
            LINES=$(jq -r '.commits[] | "- \(.id[0:7]) \(.message | gsub("\n"; " ")) — by **\(.author.username // .author.name)** (<\(.url)>)"' "$GITHUB_EVENT_PATH")
            echo "title=📦 Push to ${REPO}#${BRANCH}" >> "$GITHUB_OUTPUT"
            echo "url=$(jq -r '.compare // ""' "$GITHUB_EVENT_PATH")" >> "$GITHUB_OUTPUT"
            {
              echo "desc<<EOF"
              echo "**Pusher:** ${GITHUB_ACTOR}"
              echo "**Commits:** ${COMMITS}"
              echo "${LINES}"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"

          elif [ "$EVENT" = "pull_request" ]; then
            TITLE=$(jq -r '.pull_request.title' "$GITHUB_EVENT_PATH")
            NUMBER=$(jq -r '.pull_request.number' "$GITHUB_EVENT_PATH")
            STATE=$(jq -r '.pull_request.state' "$GITHUB_EVENT_PATH")
            ACTION=$(jq -r '.action' "$GITHUB_EVENT_PATH")
            HTML_URL=$(jq -r '.pull_request.html_url' "$GITHUB_EVENT_PATH")
            USER=$(jq -r '.pull_request.user.login' "$GITHUB_EVENT_PATH")

            echo "title=🔀 PR #${NUMBER} ${ACTION}: ${TITLE}" >> "$GITHUB_OUTPUT"
            echo "url=${HTML_URL}" >> "$GITHUB_OUTPUT"
            {
              echo "desc<<EOF"
              echo "**By:** ${USER}"
              echo "**State:** ${STATE}"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"

          else
            echo "title=ℹ️ ${EVENT} on ${REPO}" >> "$GITHUB_OUTPUT"
            echo "url=" >> "$GITHUB_OUTPUT"
            {
              echo "desc<<EOF"
              echo "No details"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Send to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ env.DISCORD_WEBHOOK_URL }}
          TITLE: ${{ steps.build.outputs.title }}
          DESC: ${{ steps.build.outputs.desc }}
          URL:  ${{ steps.build.outputs.url }}
        run: |
          jq -n --arg title "$TITLE" --arg desc "$DESC" --arg url "$URL" \
          '{
            embeds: [{
              title: $title,
              description: $desc,
              url: ($url | select(. != "")),
              timestamp: (now | todate),
              footer: { text: "GitHub → Discord" },
              author: { name: env.GITHUB_REPOSITORY }
            }]
          }' > payload.json

          curl -sS -X POST -H "Content-Type: application/json" \
            --data @payload.json "$DISCORD_WEBHOOK_URL"
